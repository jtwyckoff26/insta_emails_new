{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["IncorporationForm","handleNameChange","evt","setState","name","target","value","handleShareholderNameChange","idx","newShareholders","state","shareholders","map","shareholder","sidx","handleSubmit","a","isLoading","sub_status","body","Object","keys","key","console","log","axios","post","usernames","headers","Accept","then","response","data","JSON","parse","length","createData","number_row","original_poster","username","email","phone","data_rows","i","String","push","data_rows2","catch","error","alert","handleAddShareholder","concat","handleRemoveShareholder","filter","s","this","onSubmit","className","type","placeholder","onChange","onClick","disabled","style","overflowX","Paper","width","Table","overflow","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","variant","height","component","scope","React","Component","rootElement","document","getElementById","ReactDOM","render","App","basename","exact","path","props","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a645098.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport \"./style.css\";\n\nclass IncorporationForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      shareholders: [{ name: \"\" }],\n      isLoading: false,\n      data_rows2: [],\n      sub_status: \"None\"\n    };\n  }\n\n  handleNameChange = evt => {\n    this.setState({ name: evt.target.value });\n  };\n\n  handleShareholderNameChange = idx => evt => {\n    const newShareholders = this.state.shareholders.map((shareholder, sidx) => {\n      if (idx !== sidx) return shareholder;\n      return { ...shareholder, name: evt.target.value };\n    });\n\n    this.setState({ shareholders: newShareholders });\n  };\n\n  handleSubmit = async () => {\n    this.setState({ isLoading: true });\n    this.setState({ sub_status: \"None\" });\n    const { shareholders } = this.state;\n    var body = Object.keys(shareholders).map(function(key){\n      if (shareholders[key][\"name\"] === \"\") {\n        return null\n      }\n      else {\n        return shareholders[key][\"name\"];\n      }\n    });\n\n    console.log(\"Shares: \",shareholders);\n    console.log(\"Body: \",body);\n    axios\n      .post(\n        `https://vjj7x36vf1.execute-api.us-east-1.amazonaws.com/dev`,\n        {\n          usernames: body\n        },\n        {\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            //'Content-Type': 'application/json',\n            Accept: '*/*',\n          },\n        },\n      )\n      .then(async (response) => {\n        const data = JSON.parse(response.data.body)\n        console.log(\"Length: \",data.length)\n        console.log(\"Item1: \",data[0])\n          //console.log(\"data :\",itemList);\n          //setLoading('false');\n          const createData = async (number_row,original_poster,username,email,phone) => {\n            return { number_row, original_poster,username,email,phone};\n          }\n          \n          const data_rows = [];\n          //console.log(\"Res DAta: \",res.data);\n          var i;\n          for (i=0;i<data.length;i++) {\n          //res.data.forEach(async (item, i) => {\n              data_rows.push(await createData(\n                          String(i+1),\n                          data[i].original_poster,\n                          data[i].username,\n                          data[i].email,\n                          data[i].phone\n                          ));\n          };\n          //console.log(\"Data Rows before: \",data_rows)\n          this.setState({ data_rows2: data_rows });\n          this.setState({ sub_status: \"Done\" });\n          this.setState({ isLoading: false });\n          console.log(\"Data_rows: \",this.state.data_rows2)\n      }\n  )     \n      .catch(function (error) {\n        alert('Something went wrong! Please contact Admin@fraction.rent for help.');\n      });\n  };\n\n  handleAddShareholder = () => {\n    this.setState({\n      shareholders: this.state.shareholders.concat([{ name: \"\" }])\n    });\n  };\n\n  handleRemoveShareholder = idx => () => {\n    this.setState({\n      shareholders: this.state.shareholders.filter((s, sidx) => idx !== sidx)\n    });\n  };\n\n  render() {\n    const { isLoading,data_rows2,sub_status } = this.state;\n\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <h4>Accounts</h4>\n\n        {this.state.shareholders.map((shareholder, idx) => (\n          <div className=\"shareholder\">\n            <input\n              type=\"text\"\n              placeholder={`Shareholder #${idx + 1} name`}\n              value={shareholder.name}\n              onChange={this.handleShareholderNameChange(idx)}\n            />\n            <button\n              type=\"button\"\n              onClick={this.handleRemoveShareholder(idx)}\n              className=\"small\"\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={this.handleAddShareholder}\n          className=\"small\"\n        >\n          Add Account\n        </button>\n\n        {isLoading ? (\n          <button disabled={true}>Loading Content</button>          \n        ) : (\n          <button>Submit</button>\n        )}\n      </form>\n      {sub_status === \"None\" ? (\n        <div>\n        </div>\n      ) : (\n      <div style={{ overflowX: \"auto\" }}>\n      <Paper style={{width:\"100%\"}}>\n        <Table style={{ \"maxHeight\": 440, overflow: 'auto',}} stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">#</TableCell>\n              <TableCell align=\"left\">Original</TableCell>\n              <TableCell align=\"left\">Username</TableCell>\n              <TableCell align=\"left\">Email</TableCell>\n              <TableCell align=\"left\">Phone</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data_rows2.map(row => (\n              \n              <TableRow key={row.number_row} variant=\"body\" style={{ height: 48 }}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.number_row}\n                </TableCell>\n                <TableCell align=\"left\">{row.original_poster}</TableCell>\n                <TableCell align=\"left\">{row.username}</TableCell>\n                <TableCell align=\"left\">{row.email}</TableCell>\n                <TableCell align=\"left\">{row.phone}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n      </div>\n      )}\n      \n      </div>\n\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<IncorporationForm />, rootElement);\n\nexport default IncorporationForm;","import './App.css';\nimport React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport IncorporationForm from './components/Main';\n\n    function App() {\n        return (\n            <HashRouter basename=\"/\">\n                <div>\n                    <Route exact path=\"/\" render={props => <IncorporationForm {...props} />} /> \n                    <Route exact path=\"/insta\" render={props => <IncorporationForm {...props} />} /> \n                </div>\n            </HashRouter>\n        );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}